@page "/Administration/Settings"

@inject IMatToaster Toaster

<h3>SMTP Settings for Email</h3>
<EditForm Model="@settingsSMTP" OnValidSubmit="@SetSMTPSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table class="table">
        <tbody>
            <tr>
                <td>
                    <MatTextField Label="From Email Address" @bind-Value="settingsSMTP.EmailFrom" TValue="string" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.EmailFrom)" />
                </td>
                <td>
                    <MatTextField Label="From Name" @bind-Value="settingsSMTP.EmailName" TValue="string" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.EmailName)" />
                </td>
                <td>
                    <MatTextField Label="Login Username" @bind-Value="settingsSMTP.Username" TValue="string" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.Username)" />
                </td>
            </tr>
            <tr>
                <td>
                    <MatTextField Label="SMTP Host URL" @bind-Value="settingsSMTP.Host" TValue="string" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.Host)" />
                </td>
                <td>
                    <MatTextField Label="SMTP Port" @bind-Value="settingsSMTP.Port" TValue="int" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.Port)" />
                </td>
                <td>
                    <MatTextField Label="Login Password" @bind-Value="settingsSMTP.Password" TValue="string" Required="true" Type="password"></MatTextField>
                    <ValidationMessage For="@(() => settingsSMTP.Password)" />
                </td>
            </tr>
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    private DisplaySettingsSMTPModel settingsSMTP = new DisplaySettingsSMTPModel();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Constants.Config.SMTPUrl) &&
            Constants.Config.SMTPPort != 0)
        {
            settingsSMTP.EmailFrom = Constants.Config.SMTPEmailFrom;
            settingsSMTP.EmailName = Constants.Config.SMTPEmailName;
            settingsSMTP.Host = Constants.Config.SMTPUrl;
            settingsSMTP.Username = Constants.Config.SMTPUsername;
            settingsSMTP.Password = Constants.Config.SMTPPassword;
            settingsSMTP.Port = Constants.Config.SMTPPort;
            StateHasChanged();
        }
    }

    private async Task SetSMTPSettings()
    {
        Constants.Config.SMTPEmailFrom = settingsSMTP.EmailFrom;
        Constants.Config.SMTPEmailName = settingsSMTP.EmailName;
        Constants.Config.SMTPUrl = settingsSMTP.Host;
        Constants.Config.SMTPUsername = settingsSMTP.Username;
        Constants.Config.SMTPPassword = settingsSMTP.Password;
        Constants.Config.SMTPPort = settingsSMTP.Port;
        Config.Save();
        Toaster.CustomToast("SMTP Settings Saved Successfully", "Success", MatToastType.Success);
    }
}
