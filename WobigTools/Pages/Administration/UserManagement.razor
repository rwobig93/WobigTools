@using SharedLib.Extensions
@using MatBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using BlazorContextMenu

@inject IMatToaster Toaster
@inject IMatDialogService MatDialogService
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _roleManager

@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3 style="text-align: center">Current Users</h3>
        <h5 style="text-align: center">Right click a user to edit</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Email Confirmed</th>
                    <th>MFA Enabled</th>
                    <th>Lockout</th>
                    <th>Roles</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in _userManager.Users.ToList())
                {
                    if (user.UserName != "superperson")
                    {
                        <ContextMenuTrigger WrapperTag="tr" MenuId="userMenu" Data="user">
                            <td>@user.Email</td>
                            <td>@user.EmailConfirmed</td>
                            <td>@user.TwoFactorEnabled</td>
                            <td>@user.AccessFailedCount</td>
                            <td>@_userManager.GetRolesAsync(user).Result.GetSingleLineFromList()</td>
                        </ContextMenuTrigger>
                    }
                }
            </tbody>
        </table>
        <div class="bottom-border" />
        <ContextMenu Id="userMenu" Context="menuContext">
            <Item OnClick="@OpenRoleMenu">Edit Roles</Item>
            <Item OnClick="((e) => UnlockAccount(e, context))">Unlock Account</Item>
            <Item OnClick="((e) => ResetPassword(e, context))">Reset Password</Item>
            <Item OnClick="((e) => DeleteUser(e, context))">Delete User</Item>
        </ContextMenu>
        <MatDialog @bind-IsOpen="@roleMenuOpen">
            <h3 class="horizontal-center" style="padding-top: 0.4em; padding-bottom: 0.2em;">Edit Roles for @editingUser.Email</h3>
            <table class="table" width="95%">
                <thead>
                    <tr>
                        <th class="horizontal-center">Roles Assigned</th>
                        <th class="horizontal-center">Roles Available</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td width="48%">
                            <table class="table">
                                @foreach (var role in rolesWeHave)
                                {
                                    <tr><td><button class="btn btn-secondary" @onclick="(() => RemoveRole(role))">X</button> @role</td></tr>
                                }
                            </table>
                        </td>
                        <td width="48%">
                            <table class="table">
                                @foreach (var role in rolesWeWant)
                                {
                                    <tr><td><button class="btn btn-secondary" @onclick="(() => AddRole(role.Name))">+</button> @role.Name</td></tr>
                                }
                            </table>
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="row" style="width: 100%;">
                <div class="col horizontal-center">
                    <button class="btn btn-warning" @onclick="CloseRoleMenu">Cancel</button>
                    <button type="submit" class="btn btn-primary" @onclick="(() => SaveUserRoles(context))">Save Roles</button>
                </div>
            </div>
            <br />
        </MatDialog>
    </Authorized>
</AuthorizeView>

@code {
    private bool roleMenuOpen = false;
    private IdentityUser editingUser = new IdentityUser("empty");
    private List<string> rolesWeHave = new List<string>();
    private List<IdentityRole> rolesWeWant = new List<IdentityRole>();

    private async Task OpenRoleMenu(ItemClickEventArgs e)
    {
        editingUser = e.Data as IdentityUser;
        rolesWeHave = _userManager.GetRolesAsync(editingUser).Result.ToList();
        rolesWeWant = _roleManager.Roles.ToList();
        rolesWeWant.RemoveAll(x => rolesWeHave.Contains(x.Name));
        roleMenuOpen = true;
        await Task.CompletedTask;
    }

    private async Task CloseRoleMenu()
    {
        roleMenuOpen = false;
        editingUser = new IdentityUser("empty");
        rolesWeHave = new List<string>();
        rolesWeWant = new List<IdentityRole>();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task RemoveRole(string roleName)
    {
        rolesWeHave.Remove(roleName);
        rolesWeWant.Add(_roleManager.FindByNameAsync(roleName).Result);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task AddRole(string roleName)
    {
        rolesWeHave.Add(roleName);
        rolesWeWant.Remove(_roleManager.FindByNameAsync(roleName).Result);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SaveUserRoles(AuthenticationState authState)
    {
        Log.Debug("Starting user role save for {EmailAddress} | ActionBy: {ActionUser}", editingUser.Email, authState.User.Identity.Name);
        foreach (var role in rolesWeHave)
        {
            if (!await _userManager.IsInRoleAsync(editingUser, role))
            {
                Log.Debug("User isn't in the {RoleName} role, attempting to add | ActionBy: {ActionUser}", role, authState.User.Identity.Name);
                await _userManager.AddToRoleAsync(editingUser, role);
                Log.Information("Added the {RoleName} role to {EmailAddress} | ActionBy: {ActionUser}", editingUser.Email, authState.User.Identity.Name);
            }
            else
            {
                Log.Debug("User {EmailAddress} already is in the {RoleName} role | ActionBy: {ActionUser}", editingUser.Email, role, authState.User.Identity.Name);
            }
        }

        foreach (var role in rolesWeWant)
        {
            if (await _userManager.IsInRoleAsync(editingUser, role.Name))
            {
                Log.Debug("User is in the {RoleName} role, attempting to remove | ActionBy: {ActionUser}", role.Name, authState.User.Identity.Name);
                await _userManager.RemoveFromRoleAsync(editingUser, role.Name);
                Log.Information("Removed {EmailAddress} from the {RoleName} role | ActionBy: {ActionUser}", editingUser.Email, role.Name, authState.User.Identity.Name);
            }
            else
            {
                Log.Debug("User {EmailAddress} already isn't in the {RoleName} role | ActionBy: {ActionUser}", editingUser.Email, role, authState.User.Identity.Name);
            }
        }
        Toaster.CustomToast(editingUser.Email, "Updated roles successfully!", MatToastType.Success);

        roleMenuOpen = false;
        editingUser = new IdentityUser("empty");
        rolesWeHave = new List<string>();
        rolesWeWant = new List<IdentityRole>();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task DeleteUser(ItemClickEventArgs e, AuthenticationState authState)
    {
        editingUser = e.Data as IdentityUser;
        var deleteUser = await MatDialogService.ConfirmAsync($"Delete user {editingUser.Email}?");
        if (deleteUser)
        {
            Log.Information("Deleting user: {EmailAddress} | ActionBy: {ActionUser}", editingUser.Email, authState.User.Identity.Name);
            await _userManager.DeleteAsync(editingUser);
            Log.Information("User deleted successfully | ActionBy: {ActionUser}", authState.User.Identity.Name);
            Toaster.CustomToast("Success", "User was deleted successfully!", MatToastType.Success);
        }
        editingUser = new IdentityUser("empty");
    }

    private async Task UnlockAccount(ItemClickEventArgs e, AuthenticationState authState)
    {
        editingUser = e.Data as IdentityUser;
        Log.Information("Unlocking user: {EmailAddress} | ActionBy: {ActionUser}", editingUser.Email, authState.User.Identity.Name);
        await _userManager.ResetAccessFailedCountAsync(editingUser);
        Log.Information("Account unlocked: {EmailAddress} | ActionBy: {ActionUser}", editingUser.Email, authState.User.Identity.Name);
        Toaster.CustomToast(editingUser.Email, "Account unlocked successfully!", MatToastType.Success);
        editingUser = new IdentityUser("empty");
    }

    private async Task ResetPassword(ItemClickEventArgs e, AuthenticationState authState)
    {
        editingUser = e.Data as IdentityUser;
        var newPassword = await MatDialogService.PromptAsync("Enter a new password:");
        if (!string.IsNullOrWhiteSpace(newPassword))
        {
            Log.Debug("Resetting password for user: {EmailAddress} | ActionBy: {ActionUser}", authState.User.Identity.Name);
            var passToken = await _userManager.GeneratePasswordResetTokenAsync(editingUser);
            await _userManager.ResetPasswordAsync(editingUser, passToken, newPassword);
            Log.Information("Password reset for user: {EmailAddress} | ActionBy: {ActionUser}", authState.User.Identity.Name);
            Toaster.CustomToast(editingUser.Email, "Password reset successfully!", MatToastType.Success);
        }
        editingUser = new IdentityUser("empty");
    }
}
