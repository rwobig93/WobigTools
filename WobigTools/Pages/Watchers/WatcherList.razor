@page "/Watchers/List"

@using WobigTools.Models
@using SharedLib.Dto
@using SharedLib.General
@using MatBlazor

@inject IMatToaster Toaster

<h4 style="text-align: center">Options</h4>
<div class="row">
    <div class="col text-center">
        <button Class="btn btn-primary" @onclick="@OpenAddAlertDestination">Add Alert Destination</button>
        <button Class="btn btn-primary" @onclick="@OpenAddWatcher">Add Watcher</button>
    </div>
</div>
<br />

<MatDialog @bind-IsOpen="@menuOpenWatcher">
    <EditForm Model="@newProduct" OnValidSubmit="@AddWatcher">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="table">
            <tbody>
                <tr><td width="17%">Friendly Name:</td><td width="85%"><InputText style="width: 90%;" id="friendlyname" @bind-Value="newProduct.FriendlyName" /></td></tr>
                <tr><td width="17%">Page URL:</td><td width="85%"><InputText style="width: 90%;" id="pageurl" @bind-Value="newProduct.PageURL" /></td></tr>
                <tr><td width="17%">Keyword:</td><td width="85%"><InputText style="width: 90%;" id="keyword" @bind-Value="newProduct.Keyword" /></td></tr>
                <tr>
                    <td width="17%">Alert Destination:</td>
                    <td width="85%">
                        <select style="width: 90%;" class="form-control selectpicker" @bind="newProduct.AlertDestinationID">
                            @foreach (var alertDest in Constants.SavedData.Alerts)
                            {
                                <option value="@alertDest.AlertID">@alertDest.AlertName</option>
                            } 
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="row">
            <div class="col text-center">
                <button class="btn btn-warning" @onclick="(() => menuOpenWatcher = false)">Cancel</button>
                <button type="submit" class="btn btn-primary">Create Watcher</button>
            </div>
        </div>
        <br />
    </EditForm>
</MatDialog>

<MatDialog @bind-IsOpen="@menuOpenAlerts">
    <EditForm Model="@newProduct"> 
    @* TODO: Add display model for alert destination and editform *@
        <div class="row">
            <div class="col text-center">
                <button class="btn btn-warning" @onclick="(() => menuOpenAlerts = false)">Cancel</button>
                <button type="submit" class="btn btn-primary" disabled>Create Alert Dest</button>
            </div>
        </div>
        <br />
    </EditForm>
</MatDialog>

<h3 style="text-align: center">Watchers List</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Friendly Name</th>
            <th>Enabled</th>
            <th>Keyword</th>
            <th>Check Interval</th>
            <th>Page URL</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Constants.SavedData.TrackedProducts)
        {
            <tr>
                <td>@product.FriendlyName</td>
                <td>@product.Enabled</td>
                <td>@product.Keyword</td>
                <td>@product.CheckInterval</td>
                <td>@product.PageURL</td>
                <td>
                    <button disabled class="btn btn-secondary" @onclick="(() => EditWatcher(product))">Edit</button>
                    <button class="btn btn-warning" @onclick="(() => DeleteWatcher(product))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private DisplayTrackedProductModel newProduct = new DisplayTrackedProductModel();
    private bool menuOpenAlerts = false;
    private bool menuOpenWatcher = false;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task OpenAddAlertDestination()
    {
        menuOpenAlerts = true;
    }

    private async Task OpenAddWatcher()
    {
        menuOpenWatcher = true;
    }

    private async Task AddWatcher()
    {
        TrackedProduct p = new TrackedProduct()
        {
            FriendlyName = newProduct.FriendlyName,
            PageURL = newProduct.PageURL,
            Keyword = newProduct.Keyword,
            AlertOnKeywordNotExist = true,
            Enabled = true
        };
        if (Constants.SavedData.TrackedProducts.Find(x =>
        x.PageURL == p.PageURL &&
        x.Keyword == p.Keyword) != null)
        {
            var title = "Watcher Already Exists";
            var message = $"'{p.Keyword}' on {p.PageURL} Exists Already";
            Toaster.CustomToast(message, title, MatToastType.Danger, 8000);
        }
        else
        {
            Constants.SavedData.TrackedProducts.Add(p);
            SavedData.Save();
            Toaster.CustomToast($"Watcher {p.FriendlyName} created!", "Success", MatToastType.Success);

            newProduct = new DisplayTrackedProductModel();
            menuOpenWatcher = false;
        }
    }

    private async Task EditWatcher(TrackedProduct product)
    {

    }

    private async Task DeleteWatcher(TrackedProduct product)
    {
        Constants.DebugLog.AddMessage($"We're trying to delete tracked watcher: {product.FriendlyName}");
    }
}
