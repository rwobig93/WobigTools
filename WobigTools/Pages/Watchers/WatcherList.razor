@page "/Watchers/List"

@using WobigTools.Models
@using SharedLib.Dto
@using SharedLib.General
@using MatBlazor
@using WobigTools.Data
@using CoreLogicLib.Auto

@inject IMatToaster Toaster

@attribute [Authorize(Roles = "WatcherList")] 

<AuthorizeView Roles="WatcherList, Admin">
    <Authorized>
        @if (smtpConfigured)
        {
            <h5 class="horizontal-center">Note: Emails will come from @Constants.Config.SMTPEmailFrom</h5>
            <h5 class="horizontal-center">Whitelist this email or check your spam folder if getting email alerts</h5>
        }

        <h4 style="text-align: center">Options</h4>
        <div class="row">
            <div class="col text-center">
                <button Class="btn btn-primary" @onclick="@OpenAddAlertDestination">Add Alert Destination</button>
                <button Class="btn btn-primary" @onclick="@OpenAddWatcher">Add Watcher</button>
            </div>
        </div>
        <br />

        <MatDialog @bind-IsOpen="@menuOpenWatcher">
            <EditForm Context="formContext" Model="@newProduct" OnValidSubmit="@AddWatcher">
                <ChildContent Context="editContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <table class="table" width="95%">
                        <tbody>
                            <tr>
                                <td width="90%">
                                    <MatTextField Label="Friendly Name" @bind-Value="newProduct.FriendlyName" TValue="string" Required="true" />
                                </td>
                            </tr>
                            <tr>
                                <td width="90%">
                                    <MatTextField Label="Page URL" @bind-Value="newProduct.PageURL" TValue="string" Required="true" />
                                </td>
                            </tr>
                            <tr>
                                <td width="90%">
                                    <MatTooltip Context="tooltip" Tooltip="Must match page source, right click on desired page > Inspect to see real value">
                                        <MatTextField RefBack="@tooltip" Label="Keywords" @bind-Value="newProduct.Keyword" TValue="string" Required="true" />
                                    </MatTooltip>
                                </td>
                            </tr>
                            <tr>
                                <td width="90%">
                                    <div>Alert When:</div>
                                    <div>
                                        <MatRadioGroup @bind-Value="@newProduct.AlertOnKeywordNotExist" TValue="bool">
                                            <MatRadioButton Value="@true" TValue="bool">Keywords Don't Exist</MatRadioButton>
                                            <MatRadioButton Value="@false" TValue="bool">Keywords Exist</MatRadioButton>
                                        </MatRadioGroup>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td width="90%">
                                    <MatSelect Label="Alert Destination" @bind-Value="@newProduct.AlertDestinationID">
                                        @foreach (var alertDest in Constants.SavedData.Alerts)
                                        {
                                            <MatOption Value="@alertDest.AlertID">@alertDest.AlertName (@alertDest.AlertType.ToString())</MatOption>
                                        }
                                    </MatSelect>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="row" style="width: 95%;">
                        <div class="col text-center">
                            <button class="btn btn-warning" @onclick="CloseAddWatcher">Cancel</button>
                            <button type="submit" class="btn btn-primary">Create Watcher</button>
                        </div>
                    </div>
                    <br />
                </ChildContent>
            </EditForm>
        </MatDialog>

        <MatDialog @bind-IsOpen="@menuOpenAlerts">
            <EditForm Context="formContext" Model="@newAlert" OnValidSubmit="@AddAlertDestination">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <table class="table" width="90%">
                    <tbody>
                        <tr>
                            <td>
                                <MatTextField Label="Alert Name" @bind-Value="newAlert.AlertName" TValue="string" Required="true"></MatTextField>
                            </td>
                            <td>
                                <MatSelect Label="Alert Destination" @bind-Value="@newAlert.AlertType">
                                    <MatOption Value="0">Email</MatOption>
                                    <MatOption Value="1">Discord</MatOption>
                                    <MatOption Value="2">Email And Discord</MatOption>
                                </MatSelect>
                            </td>
                        </tr>
                        @if (newAlert.AlertType == 0)
                        {
                            newAlert.WebHookURL = "https://blank.com";
                            newAlert.MentionString = "blank-string";
                            <tr>
                                <td width="90%">
                                    <MatTooltip Context="tooltip" Tooltip="Seperate multiple emails with a ;">
                                        <MatTextField RefBack="@tooltip" Label="Email(s)" Style="width: 90% !important;" @bind-Value="newAlert.Emails" TValue="string" Required="true"></MatTextField>
                                    </MatTooltip>
                                </td>
                            </tr>
                        }
                        @if (newAlert.AlertType == 1)
                        {
                            newAlert.Emails = "blank@mail.com";
                            <tr>
                                <td width="45%">
                                    <MatTextField Label="Discord Webhook URL" @bind-Value="newAlert.WebHookURL" />
                                </td>
                                <td width="35%">
                                    <MatTooltip Context="tooltip" Tooltip="Discord ID only, no <&> or @@">
                                        <MatTextField RefBack="@tooltip" Label="Discord Mention ID" @bind-Value="newAlert.MentionString" />
                                    </MatTooltip>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                </td>
                                <td class="horizontal-center">
                                    <MatButtonLink Target="_blank" Href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-">How to find a Discord ID</MatButtonLink>
                                </td>
                            </tr>
                        }
                        @if (newAlert.AlertType == 2)
                        {
                            <tr>
                                <td width="90%">
                                    <MatTooltip Context="tooltip" Tooltip="Seperate multiple emails with a ;">
                                        <MatTextField RefBack="@tooltip" Label="Email(s)" Style="width: 90% !important;" @bind-Value="newAlert.Emails" TValue="string" Required="true"></MatTextField>
                                    </MatTooltip>
                                </td>
                            </tr>
                            <tr>
                                <td width="45%">
                                    <MatTextField Label="Discord Webhook URL" @bind-Value="newAlert.WebHookURL" />
                                </td>
                                <td width="45%">
                                    <MatTooltip Context="tooltip" Tooltip="Discord ID only, no <&> or @@">
                                        <MatTextField RefBack="@tooltip" Label="Discord Mention ID" @bind-Value="newAlert.MentionString" />
                                    </MatTooltip>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                </td>
                                <td class="horizontal-center">
                                    <MatButtonLink Target="_blank" Href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-">How to find a Discord ID</MatButtonLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="row" style="width: 95%;">
                    <div class="col text-center">
                        <button class="btn btn-warning" @onclick="CloseAddAlertDestination">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Alert</button>
                    </div>
                </div>
                <br />
            </EditForm>
        </MatDialog>

        <h3 style="text-align: center">Watchers List</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Friendly Name</th>
                    <th>Enabled</th>
                    <th>Keyword</th>
                    <th>Check Interval</th>
                    <th>Page URL</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Constants.SavedData.TrackedProducts)
                {
                    <tr>
                        <td>@product.FriendlyName</td>
                        <td>@product.Enabled</td>
                        <td>@product.Keyword</td>
                        <td>@product.CheckInterval</td>
                        <td>@product.PageURL</td>
                        <td>
                            <button class="btn btn-secondary" @onclick="(() => ToggleWatcher(product, context))">
                                @if (product.Enabled)
                                {<div>Disable</div> }
                                else
                                { <div>Enable</div>}
                            </button>
                            <button class="btn btn-warning" @onclick="(() => DeleteWatcher(product, context))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.Unauthorized />
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <WobigTools.Pages.Auth.NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    private DisplayTrackedProductModel newProduct = new DisplayTrackedProductModel();
    private DisplayAlertModel newAlert = new DisplayAlertModel();
    private bool menuOpenAlerts = false;
    private bool menuOpenWatcher = false;
    private bool smtpConfigured = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        ValidateSMTP();
    }

    private void ValidateSMTP()
    {
        if (string.IsNullOrWhiteSpace(Constants.Config.SMTPEmailFrom) ||
            string.IsNullOrWhiteSpace(Constants.Config.SMTPEmailName) ||
            string.IsNullOrWhiteSpace(Constants.Config.SMTPPassword) ||
            string.IsNullOrWhiteSpace(Constants.Config.SMTPUrl) ||
            string.IsNullOrWhiteSpace(Constants.Config.SMTPUsername))
        {
            smtpConfigured = false;
        }
        else
        {
            smtpConfigured = true;
        }
    }

    private async Task OpenAddAlertDestination()
    {
        menuOpenAlerts = true;
        await Task.CompletedTask;
    }

    private async Task CloseAddAlertDestination()
    {
        menuOpenAlerts = false;
        newAlert = new DisplayAlertModel();
        await Task.CompletedTask;
    }

    private async Task OpenAddWatcher()
    {
        menuOpenWatcher = true;
        await Task.CompletedTask;
    }

    private async Task CloseAddWatcher()
    {
        menuOpenWatcher = false;
        newProduct = new DisplayTrackedProductModel();
        await Task.CompletedTask;
    }

    private async Task AddAlertDestination()
    {
        Alert a = new Alert()
        {
            AlertName = newAlert.AlertName,
            AlertType = (AlertType)newAlert.AlertType,
            Emails = newAlert.Emails.Split(';').ToList(),
            WebHookURL = newAlert.WebHookURL,
            MentionString = newAlert.MentionString
        };

        switch (newAlert.AlertType)
        {
            case 1:
                newAlert.WebHookURL = "https://blank.com";
                newAlert.MentionString = "blank-string";
                break;
            case 2:
                newAlert.Emails = "blank@mail.com";
                break;
            case 3:
                break;
            default:
                Toaster.CustomToast("You didn't pick an alert type!", "Warning", MatToastType.Warning);
                break;
        }

        if (newAlert.AlertType == -1)
        {
            Toaster.CustomToast("You didn't pick an alert type!", "Warning", MatToastType.Warning);
            return;
        }
        else if (Constants.SavedData.Alerts.Find(x =>
        x.AlertType == AlertType.Email &&
        x.Emails == a.Emails) != null)
        {
            Toaster.CustomToast("Alert for these emails already exists", "Warning", MatToastType.Warning);
        }
        else if (Constants.SavedData.Alerts.Find(x =>
        x.AlertType == AlertType.Webhook &&
        x.WebHookURL == a.WebHookURL) != null)
        {
            Toaster.CustomToast("Alert for Webhook already exists", "Warning", MatToastType.Warning);
        }
        else if (Constants.SavedData.Alerts.Find(x =>
        x.AlertType == AlertType.Email_Webhook &&
        x.WebHookURL == a.WebHookURL &&
        x.Emails == a.Emails) != null)
        {
            Toaster.CustomToast("Alert for this Webhook & Emails exists", "Warning", MatToastType.Warning);
        }
        else
        {
            Constants.SavedData.Alerts.Add(a);
            SavedData.Save();
            Toaster.CustomToast($"Alert {a.AlertName} created!", "Success", MatToastType.Success);
            Log.Information("Alert destination created: {AlertID} | {AlertName} | {AlertType}", a.AlertID, a.AlertName, a.AlertType);

            newAlert = new DisplayAlertModel();
            menuOpenAlerts = false;
        }
        await Task.CompletedTask;
    }

    private async Task AddWatcher()
    {
        if (Constants.SavedData.Alerts.Find(x => x.AlertID == newProduct.AlertDestinationID) == null)
        {
            Toaster.CustomToast("Please choose an Alert Destination", "Alert Destination Invalid", MatToastType.Warning);
            return;
        }
        TrackedProduct p = new TrackedProduct()
        {
            FriendlyName = newProduct.FriendlyName,
            PageURL = newProduct.PageURL,
            Keyword = newProduct.Keyword,
            AlertOnKeywordNotExist = true,
            Enabled = true,
            AlertDestination = Constants.SavedData.Alerts.Find(x => x.AlertID == newProduct.AlertDestinationID)
        };
        if (Constants.SavedData.TrackedProducts.Find(x =>
        x.PageURL == p.PageURL &&
        x.Keyword == p.Keyword) != null)
        {
            Toaster.CustomToast($"'{p.Keyword}' on {p.PageURL} Exists Already", "Watcher Already Exists", MatToastType.Danger, 8000);
        }
        else
        {
            Constants.SavedData.TrackedProducts.Add(p);
            SavedData.Save();
            Toaster.CustomToast($"Watcher {p.FriendlyName} created!", "Success", MatToastType.Success);

            newProduct = new DisplayTrackedProductModel();
            menuOpenWatcher = false;
        }
        await Task.CompletedTask;
    }

    private async Task ToggleWatcher(TrackedProduct product, AuthenticationState context)
    {
        product.Enabled = !product.Enabled;
        Log.Information("Tracker toggled: {TrackerID} | {TrackerFriendlyName} | State: {TrackerState}", product.TrackerID, product.FriendlyName, product.Enabled);
        using (var db = new AppDbContext())
        {
            db.Add(new WatcherAudit { TrackerID = product.TrackerID, WatcherName = product.FriendlyName, State = product.Enabled ? "Enabled" : "Disabled", ChangingUser = context.User.Identity.Name });
            await db.SaveChangesAsync();
        }
        //Constants.WatcherAuditLogs.AddMessage($"Watcher Toggled: {product.FriendlyName} | State: {product.Enabled} | User: {context.User.Identity.Name}");
        SavedData.Save();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task DeleteWatcher(TrackedProduct product, AuthenticationState context)
    {
        Log.Information("Deleting tracker: {TrackerID} | {TrackerFriendlyName} | {TrackerKeyword} | {TrackerURL}", product.TrackerID, product.FriendlyName, product.Keyword, product.PageURL);
        using (var db = new AppDbContext())
        {
            db.Add(new WatcherAudit { TrackerID = product.TrackerID, WatcherName = product.FriendlyName, State = "Deleted", ChangingUser = context.User.Identity.Name });
            await db.SaveChangesAsync();
        }
        //Constants.WatcherAuditLogs.AddMessage($"Watcher Deleted: {product.FriendlyName} | User: {context.User.Identity.Name}");
        Constants.SavedData.TrackedProducts.Remove(product);
        SavedData.Save();
        StateHasChanged();
        await Task.CompletedTask;
    }
}
