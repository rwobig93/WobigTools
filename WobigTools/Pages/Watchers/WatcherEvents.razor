@page "/Watchers/Events"
@using System.Text
@using CoreLogicLib.Standard 

@inject IJSRuntime JSRuntime
@inject AppDbContext db

<AuthorizeView Roles="WatcherEvents, Admin">
    <Authorized>
        <h1 class="horizontal-center title">Watcher Events</h1>
        <div class="textarea">
            @foreach (var watcherEvent in watcherEvents)
            {
                <div class="display-message">@watcherEvent.TimeStamp :: @watcherEvent.Event: @watcherEvent.FriendlyName | Keyword(s): @watcherEvent.Keyword</div>
            }
        </div>
        <br />
        <div class="bottom-border" />
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.Unauthorized />
    </NotAuthorized>
</AuthorizeView>
<br />
<AuthorizeView Roles="Admin, Moderator">
    <Authorized>
        <h1 class="horizontal-center title">Watcher Audit Logs</h1>
        <div class="horizontal-center">
            <button class="btn btn-primary" @onclick="DownloadAuditLog">Download Audit Log</button>
        </div>
        <br />
        <div class="textarea">
            @foreach (var auditEvent in watcherAudits)
            {
                <div class="display-message">@auditEvent.TimeStamp :: Name[@auditEvent.WatcherName] State[@auditEvent.State] User[@auditEvent.ChangingUser]</div>
            }
        </div>
        <br />
        <div class="bottom-border" />
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <WobigTools.Pages.Auth.NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<WatcherEvent> watcherEvents = new List<WatcherEvent>();
    private List<WatcherAudit> watcherAudits = new List<WatcherAudit>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        WobigToolsEvents.WatcherEventOccured += IndexAsyncHandler;
        WobigToolsEvents.WatcherAuditOccured += IndexAsyncHandler;
    }

    private async void IndexAsyncHandler(object sender, object eventObject)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task DownloadAuditLog()
    {
        StringBuilder sb = new StringBuilder();
        @foreach (var auditEvent in db.WatcherAudits.OrderBy(x => x.TimeStamp).Take(100))
        {
            sb.Append($"{auditEvent.TimeStamp} :: Name[{auditEvent.WatcherName}] State[{auditEvent.State}] User[{auditEvent.ChangingUser}]{Environment.NewLine}");
        }
        byte[] fileContent = System.Text.Encoding.UTF8.GetBytes(sb.ToString());
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "AuditLog.log", "text/plain", fileContent);
    }

    private async Task DownloadAuditLogFast()
    {
        StringBuilder sb = new StringBuilder();
        @foreach (var auditEvent in db.WatcherAudits.OrderBy(x => x.TimeStamp).Take(100))
        {
            sb.Append($"{auditEvent.TimeStamp} :: Name[{auditEvent.WatcherName}] State[{auditEvent.State}] User[{auditEvent.ChangingUser}]");
        }
        byte[] fileContent = System.Text.Encoding.UTF8.GetBytes(sb.ToString());
        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", "AuditLog.log", "text/plain", fileContent);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "AuditLog.log", "text/plain", fileContent);
        }
    }

    private void UpdateWatcherList()
    {
        watcherEvents = db.WatcherEvents.OrderByDescending(x => x.TimeStamp).Take(100).ToList();
        watcherAudits = db.WatcherAudits.OrderByDescending(x => x.TimeStamp).Take(100).ToList();
    }
}
