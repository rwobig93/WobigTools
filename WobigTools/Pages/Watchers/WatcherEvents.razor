@page "/Watchers/Events"
@using SharedLib.General
@using System.Text
@using Microsoft.EntityFrameworkCore 

@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "WatcherEvents")]

<AuthorizeView Roles="WatcherEvents, Admin">
    <Authorized>
        <h3 class="horizontal-center">Watcher Events</h3>
        <div class="textarea">
            @using (var db = new AppDbContext())
            {
                @foreach (var watcherEvent in db.WatcherEvents.OrderBy(x => x.TimeStamp).Take(100))
                {
                    <div class="display-message">@watcherEvent.TimeStamp :: @watcherEvent.Event: @watcherEvent.FriendlyName | Keyword(s): @watcherEvent.Keyword</div>
                }
            }
        </div>
        <br />
        <div class="bottom-border" />
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.Unauthorized />
    </NotAuthorized>
</AuthorizeView>
<br />
<AuthorizeView Roles="Admin">
    <Authorized>
        <h3 class="horizontal-center">Watcher Audit Logs</h3>
        <div class="textarea">
            @using (var db = new AppDbContext())
            {
                @foreach (var auditEvent in db.WatcherAudits.OrderBy(x => x.TimeStamp).Take(100))
                {
                    <div class="display-message">@auditEvent.TimeStamp :: Name[@auditEvent.WatcherName] State[@auditEvent.State] User[@auditEvent.ChangingUser]</div>
                }
            }
        </div>
        <div class="horizontal-center"><button class="btn btn-primary" @onclick="DownloadAuditLog">Download Audit Log</button></div>
        <div class="horizontal-center"><button class="btn btn-secondary" @onclick="DownloadAuditLogFast">Download Audit Log Fast</button></div>
        <br />
        <br />
        <div class="bottom-border" />
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <WobigTools.Pages.Auth.NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //Constants.WatcherEvents.MessagesChanged += IndexAsyncHandler;
        using var db = new AppDbContext();
        db.SavedChanges += IndexAsyncHandler;
    }

    private async void IndexAsyncHandler(object sender, Microsoft.EntityFrameworkCore.SavedChangesEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task DownloadAuditLog()
    {
        StringBuilder sb = new StringBuilder();
        @using (var db = new AppDbContext())
        {
            @foreach (var auditEvent in db.WatcherAudits.OrderBy(x => x.TimeStamp).Take(100))
            {
                sb.Append($"{auditEvent.TimeStamp} :: Name[{auditEvent.WatcherName}] State[{auditEvent.State}] User[{auditEvent.ChangingUser}]");
            }
        }
        byte[] fileContent = System.Text.Encoding.UTF8.GetBytes(sb.ToString());
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "AuditLog.log", "text/plain", fileContent);
    }

    private async Task DownloadAuditLogFast()
    {
        StringBuilder sb = new StringBuilder();
        @using (var db = new AppDbContext())
        {
            @foreach (var auditEvent in db.WatcherAudits.OrderBy(x => x.TimeStamp).Take(100))
            {
                sb.Append($"{auditEvent.TimeStamp} :: Name[{auditEvent.WatcherName}] State[{auditEvent.State}] User[{auditEvent.ChangingUser}]");
            }
        }
        byte[] fileContent = System.Text.Encoding.UTF8.GetBytes(sb.ToString());
        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", "AuditLog.log", "text/plain", fileContent);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "AuditLog.log", "text/plain", fileContent);
        }
    }
}
