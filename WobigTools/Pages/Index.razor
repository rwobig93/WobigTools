@page "/"
@using SharedLib.General
@using MatBlazor
@using System.Security.Claims

@inject IMatToaster Toaster

<AuthorizeView>
    <Authorized>
        @*<table class="horizontal-center">
            <tr>
                <td width="15%">
                    <img width="50" height="50" src="@context.User.Claims.Where(s => s.Type == "picture").FirstOrDefault().Value" />
                </td>
                <td width="50%">
                    <div>Your Email: @context.User.Claims.Where(e => e.Type.EndsWith("emailaddress")).FirstOrDefault().Value</div>
                    <div>Your Name: @context.User.Claims.Where(e => e.Type.EndsWith("name")).FirstOrDefault().Value</div>
                    <div>Your ID: @context.User.Claims.Where(e => e.Type.EndsWith("nameidentifier")).FirstOrDefault().Value</div>
                </td>
            </tr>
        </table>*@

        <h1 class="horizontal-center">Get back to work Rick!</h1>

        <div class="horizontal-center">
            <button class="btn btn-primary" @onclick="AddLog">Add Log</button>
            <button class="btn btn-secondary" @onclick="ToastBarage">Toast Barage!</button>
            <button class="btn btn-danger" @onclick="(() => TestButton(context))">Dangerous button</button>
            <a href="rename/testing" class="btn btn-primary text-center">Test Testing</a>
        </div>
        <br />
        <br />
        <h2 class="horizontal-center"> Log Output: </h2>
        <div class="textarea">
            @foreach (var line in Constants.DebugLog.Messages)
            {
                <div class="display-message">@line</div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.UnAuthorizedLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Constants.DebugLog.MessagesChanged += IndexAsyncHandler;
    }

    private void AddLog()
    {
        Constants.DebugLog.AddMessage($"Adding a test string here! {Guid.NewGuid()}");
    }

    private async void IndexAsyncHandler()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task ToastBarage()
    {
        Toaster.CustomToast("Test Toast Yo!", "Test Toast Danger", MatToastType.Danger);
        Toaster.CustomToast("Test Toast Yo!", "Test Toast Info", MatToastType.Info);
        Toaster.CustomToast("Test Toast Yo!", "Test Toast Primary", MatToastType.Primary);
        Toaster.CustomToast("Test Toast Yo!", "Test Toast Success", MatToastType.Success);
        Toaster.CustomToast("Test Toast Yo!", "Test Toast Warning", MatToastType.Warning);
        await Task.CompletedTask;
    }

    private async Task TestButton(AuthenticationState context)
    {
        HttpClient client = new HttpClient();
        await client.GetAsync("https://localhost:44344/oauth/logout");
        StateHasChanged();
    }
}