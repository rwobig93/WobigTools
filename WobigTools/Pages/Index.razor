@page "/"
@using MatBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject IMatToaster Toaster
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _roleManager

<AuthorizeView Roles="Admin">
    <Authorized>
        <WobigTools.Pages.Administration.SystemWarnings />
        <br />
        <WobigTools.Pages.Administration.DevConsole />
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        @if (_userManager.GetRolesAsync(_userManager.GetUserAsync(context.User).Result).Result.Count <= 0)
        {
            <h2 class="horizontal-center">You don't currently have any access</h2>
            <br />
            <br />
            <h4 class="horizontal-center">We'll grant you proper access shortly,</h4>
            <h4 class="horizontal-center">if you are supposed to be here</h4>
        }
        else
        {
            <table class="table-invisible" width="95%">
                <tbody>
                    <tr>
                        <td width="98%">
                            <MatPaper Elevation="6" Rounded="true">@userCount Users</MatPaper>
                        </td>
                        <td width="98%">
                            <MatPaper Elevation="6" Rounded="true">@watcherCount Watchers</MatPaper>
                        </td>
                        <td width="98%">
                            <MatPaper Elevation="6" Rounded="true">@eventCount Events</MatPaper>
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="mat-elevation-z8">Testing</div>
        }
        <br />
        <div class="bottom-border" />
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    private int userCount = 0;
    private int watcherCount = 0;
    private int eventCount = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!Constants.HadFirstLogin)
        {
            CoreLogicLib.Standard.Core.InitializeWebTasks(MyHttpContext.AppBaseUrl);
        }
        UpdateUserCount();
        UpdateWatcherCount();
        UpdateWatcherEventCount();
    }

    private void UpdateUserCount()
    {
        userCount = _userManager.Users.Count();
    }

    private void UpdateWatcherCount()
    {
        watcherCount = Constants.SavedData.TrackedProducts.Count;
    }

    private void UpdateWatcherEventCount()
    {
        using var db = new AppDbContext();
        eventCount = db.WatcherEvents.Count();
    }
}
