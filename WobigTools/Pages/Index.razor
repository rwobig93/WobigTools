@page "/"
@using MatBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@using CoreLogicLib.Standard

@inject IMatToaster Toaster
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _roleManager
@inject AuthenticationStateProvider AuthProvider
@inject AppDbContext db

<AuthorizeView Roles="Admin">
    <Authorized>
        <WobigTools.Pages.Administration.SystemWarnings />
        <br />
        <WobigTools.Pages.Administration.DevConsole />
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        @if (UserHasNoRoles(context).Result)
        {
        <div class="invalid-box">
            <h2 class="horizontal-center">You don't currently have any access</h2>
            <br />
            <br />
            <h4 class="horizontal-center">We'll grant you proper access shortly,</h4>
            <h4 class="horizontal-center">if you are supposed to be here</h4>
        </div>
        }
        else
        {
            <table class="table-invisible" width="98%">
                <thead>
                    <tr>
                        <th aria-hidden="true"></th>
                        <th aria-hidden="true"></th>
                        <th aria-hidden="true"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="horizontal-center">
                        <td class="horizontal-center">
                            <MatRipple>
                                <MatPaper Class="title" Elevation="6" Rounded="true">@userCount Users</MatPaper>
                            </MatRipple>
                        </td>
                        <td class="horizontal-center">
                            <MatRipple>
                                <MatPaper Class="title" Elevation="6" Rounded="true">@watcherCount Watchers</MatPaper>
                            </MatRipple>
                        </td>
                        <td class="horizontal-center">
                            <MatRipple>
                                <MatPaper Class="title" Elevation="6" Rounded="true">@alertCount Alerts</MatPaper>
                            </MatRipple>
                        </td>
                        <td class="horizontal-center">
                            <MatRipple>
                                <MatPaper Class="title" Elevation="6" Rounded="true">@checkCount Checks</MatPaper>
                            </MatRipple>
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="row">
                <div style="width: 90%;">
                    <RadzenChart>
                        <RadzenColumnSeries Data="@chartValues" CategoryProperty="Name" Title="WobigTools Stats" LineType="LineType.Dashed" ValueProperty="Count" />
                        <RadzenColumnOptions Radius="5" />
                        <RadzenValueAxis Step="1" Min="0">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Counts" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        }
        <br />
        <div class="bottom-border" />
    </Authorized>
    <NotAuthorized>
        <WobigTools.Pages.Auth.NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    private int userCount = 0;
    private int watcherCount = 0;
    private int alertCount = 0;
    private int checkCount = 0;
    private int destCount = 0;
    private List<ChartValue> chartValues = new List<ChartValue>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!Constants.HadFirstLogin)
        {
            CoreLogicLib.Standard.Core.InitializeWebTasks(MyHttpContext.AppBaseUrl);
        }
        UpdateUserCount();
        UpdateWatcherCounts();
        UpdateDestinationCount();
        UpdateCharts();
    }

    private void UpdateUserCount()
    {
        userCount = _userManager.Users.Count();
    }

    private void UpdateWatcherCounts()
    {
        watcherCount = Constants.SavedData.TrackedProducts.Count;
        checkCount = db.WatcherEvents.Count();
        alertCount = db.WatcherEvents.Where(x => x.Event == "Alert Trigger").Count();
    }

    private void UpdateDestinationCount()
    {
        destCount = Constants.SavedData.Alerts.Count();
    }

    private void UpdateCharts()
    {
        chartValues.Add(new ChartValue() { Name = "Users", Count = userCount });
        chartValues.Add(new ChartValue() { Name = "Watchers", Count = watcherCount });
        chartValues.Add(new ChartValue() { Name = "Destinations", Count = destCount });
    }

    private async Task<bool> UserHasNoRoles(AuthenticationState context)
    {
        var user = await _userManager.GetUserAsync(context.User);
        var roles = await _userManager.GetRolesAsync(user);
        return roles.Count <= 0;
    }

    //private void WatcherEventChanged(object sender, EventArgs e)
    //{
    //    checkCount = db.WatcherEvents.Count();
    //    alertCount = db.WatcherEvents.Where(x => x.Event == "Alert Trigger").Count();
    //    if (chartValues.Find(x => x.Name == "Alerts") != null)
    //    {
    //        chartValues.Remove(chartValues.Find(x => x.Name == "Alerts"));
    //    }
    //    chartValues.Add(new ChartValue() { Name = "Alerts", Count = alertCount });
    //}
}
